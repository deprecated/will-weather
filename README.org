#+PROPERTY: header-args    :exports both
* Getting my weather data from Netatmos station

** Installing Python netatmo api library
+ There are two
+ This one seems the best
  + https://github.com/rene-d/netatmo
  + [[file:~/Source/netatmo/]]
** Setting credentials
+ These are in my [[file:~/.netatmorc]]
+ Passwords and keys are also stored in 1Password vault
** Available stations
#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/netatmo.py list
#+END_SRC

#+RESULTS:
: 1 station 70:ee:50:22:ce:e6 Privada Hijos del Ejército Morelia MX
:    module 70:ee:50:22:ce:e6 indoor Temperature,CO2,Humidity,Noise,Pressure
:    module 02:00:00:22:b8:7e outdoor Temperature,Humidity
:    module 05:00:00:02:d3:6c Rain Gauge Rain
** TODO Deal with the rain gauge
- This shows up in the available stations, but I am not sure how to grab the data from it

#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/netatmo.py dump
#+END_SRC

#+RESULTS:
#+begin_example
station Privada Hijos del Ejército
          date_setup : 1520632818 - 2018-03-09 16:00:18
          last_setup : 1520632818 - 2018-03-09 16:00:18
        last_upgrade : 1520632820 - 2018-03-09 16:00:20
               place : Morelia MX / alt 1920
         wifi_status : 61
   last_status_store : 1563407025 - 2019-07-17 18:43:45
module indoor - Main device
                 _id : 70:ee:50:22:ce:e6
           data_type : ['Temperature', 'CO2', 'Humidity', 'Noise', 'Pressure']
    AbsolutePressure > 807.5
       date_max_temp > 1563385850 - 2019-07-17 12:50:50
       date_min_temp > 1563372817 - 2019-07-17 09:13:37
            max_temp > 23.3
            min_temp > 20.1
      pressure_trend > down
          temp_trend > down
            time_utc > 1563407011 - 2019-07-17 18:43:31
                 CO2 = 497
            Humidity = 63
               Noise = 36
            Pressure = 1019.1
         Temperature = 22.4
module outdoor - Outdoor
                 _id : 02:00:00:22:b8:7e
           data_type : ['Temperature', 'Humidity']
          last_setup : 1520632819 - 2018-03-09 16:00:19
            firmware : 44
           rf_status : 73 (90=low, 60=highest)
     battery_percent : 65 %
        last_message : 1563407021 - 2018-03-09 16:00:19
           last_seen : 1563407015 - 2018-03-09 16:00:19
       date_max_temp > 1563385207 - 2019-07-17 12:40:07
       date_min_temp > 1563366743 - 2019-07-17 07:32:23
            max_temp > 26.7
            min_temp > 17.3
          temp_trend > down
            time_utc > 1563406964 - 2019-07-17 18:42:44
            Humidity = 73
         Temperature = 20.5
module Rain Gauge - Rain Gauge
                 _id : 05:00:00:02:d3:6c
           data_type : ['Rain']
          last_setup : 1523057640 - 2018-04-06 18:34:00
            firmware : 8
           rf_status : 72 (90=low, 60=highest)
     battery_percent : 78 %
        last_message : 1563407021 - 2018-04-06 18:34:00
           last_seen : 1563407021 - 2018-04-06 18:34:00
          sum_rain_1 > 0.30300000000000005
         sum_rain_24 > 19.7
            time_utc > 1563407009 - 2019-07-17 18:43:29
                Rain = 0.303
{'body': {'1563405322': [22.7, 507, 62, 36, 1018.7], '1563405622': [22.6, 499, 62, 36, 1019], '1563405922': [22.6, 501, 62, 35, 1019.1], '1563406226': [22.5, 507, 63, 36, 1019.2], '1563406527': [22.5, 503, 62, 35, 1019.2], '1563406831': [22.4, 498, 62, 35, 1019.1], '1563407011': [22.4, 497, 63, 36, 1019.1]}, 'status': 'ok', 'time_exec': 0.030382871627807617, 'time_server': 1563407073}
{'body': {'1563405272': [21.2, 72], '1563405579': [21, 71], '1563405887': [20.8, 71], '1563406195': [20.8, 71], '1563406502': [20.6, 70], '1563406810': [20.5, 72], '1563406964': [20.5, 73]}, 'status': 'ok', 'time_exec': 0.018594026565551758, 'time_server': 1563407074}
{'body': {'1563405317': [0], '1563405611': [0], '1563405919': [0], '1563406227': [0], '1563406521': [0], '1563406829': [0], '1563407009': [0.303]}, 'status': 'ok', 'time_exec': 0.031126976013183594, 'time_server': 1563407074}
#+end_example

So the ~dump~ command works fine.  We just need to work out how to change the ~fetch~ command. 

This implementation is just copied from ~netatmo.fetch~, but changing the necessary parameters to fetch data from the rain gauge. 

#+begin_src python :tangle netatmo-fetch-rain.py
  import sys
  sys.path.append("/Users/will/Source/netatmo")
  import netatmo

  def fetch_rain():
      """
          retrieve measures from rain station and append them to csv files
      """
      ws = netatmo.WeatherStation(netatmo.DEFAULT_RC_FILE)
      if not ws.get_data():
          return
      station = ws.station_by_name()
      rainmodule = station['modules'][1]
      print("module_id    : {}".format(rainmodule['_id']))
      print("module_name  : {}".format(rainmodule['module_name']))
      print("data_type    : {}".format(rainmodule['data_type']))

      data_type = ["Rain"]
      netatmo.dl_csv(ws, "netatmo_rain.csv",
                     station['_id'], rainmodule['_id'],
                     data_type, rainmodule['dashboard_data']['time_utc'])


  if __name__ == "__main__":
      fetch_rain()

#+end_src

#+begin_src sh :results verbatim :exports both
python netatmo-fetch-rain.py
#+end_src

#+RESULTS:
: module_id    : 05:00:00:02:d3:6c
: module_name  : Rain Gauge
: data_type    : ['Rain']
: getmeasure 1 date_begin=1563474434 Thu Jul 18 13:27:14 2019



** Download data into CSV files
Run this periodically - it should just grab the new data (also run the rain gauge version above)

#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/netatmo.py fetch
#+END_SRC

#+RESULTS:
: station_name : Privada Hijos del Ejército
: device_id    : 70:ee:50:22:ce:e6
: module_name  : indoor
: data_type    : ['Temperature', 'CO2', 'Humidity', 'Noise', 'Pressure']
: module_id    : 02:00:00:22:b8:7e
: module_name  : outdoor
: data_type    : ['Temperature', 'Humidity']
: getmeasure 1 date_begin=1563474435 Thu Jul 18 13:27:15 2019
: getmeasure 1 date_begin=1563474434 Thu Jul 18 13:27:14 2019
** DONE Make graphs
CLOSED: [2018-03-11 Sun 00:02]
*** Inside and outside temperature and humidity
#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)

  plotfile = "weather-test.png"

  fig, (ax2, ax) = plt.subplots(2, 1, sharex=True, figsize=(15, 7))

  ax2.plot(df_inside.index.to_pydatetime(), df_inside.Humidity, label="inside", lw=0.2)
  ax2.plot(df_outside.index.to_pydatetime(), df_outside.Humidity, label="outside", lw=0.2)
  ax2.legend()
  ax2.set(
      ylabel="Humidity, Percent"
  )

  ax.plot(df_inside.index.to_pydatetime(), df_inside.Temperature, label="inside", lw=0.2)
  ax.plot(df_outside.index.to_pydatetime(), df_outside.Temperature, label="outside", lw=0.2)
  ax.legend()
  ax.set(
      xlabel="Date",
      ylabel="Temperature, Celsius"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:weather-test.png]]
*** Pressure, CO_2, and noise 


#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df = df_inside.join(df_outside, rsuffix=" out")
  # Correct the pressures from before 2019-07
  lowmask = df.Pressure < 1000.0
  df.Pressure[lowmask] += 212.0

  df_max_day = df.resample('1D').max()
  df_min_day = df.resample('1D').min()

  plotfile = "noise-test.png"

  fig, (ax3, ax2, ax) = plt.subplots(3, 1, sharex=True, figsize=(15, 10))


  ax3.fill_between(df.index.to_pydatetime(), df.Pressure,
                   step="mid", y2=800.0, label="Pressure")
  ax3.plot(df_max_day.index.to_pydatetime(), df_max_day.Pressure,
           label="_nolabel", color="r")
  ax3.plot(df_min_day.index.to_pydatetime(), df_min_day.Pressure,
           label="_nolabel", color="w")
  ax3.legend(loc="upper left")
  ax3.set(
      ylabel="Pressure, mB",
      ylim=[1010.0, 1030.0],
  )

  ax2.fill_between(df.index.to_pydatetime(), df.CO2,
                   step="mid", y2=330.0, label="CO2")
  ax2.plot(df_max_day.index.to_pydatetime(), df_max_day.CO2,
           label="_nolabel", color="r")
  ax2.plot(df_min_day.index.to_pydatetime(), df_min_day.CO2,
           label="_nolabel", color="w")
  ax2.legend(loc="upper left")
  ax2.set(
      ylabel="CO$_{2}$, ppm",
      ylim=[310.0, 1000.0],
  )

  ax.fill_between(df.index.to_pydatetime(), df.Noise, y2=33.0, label="Noise")
  ax.legend(loc="upper left")
  ax.set(
      xlabel="Date",
      ylabel="Noise, dB"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:noise-test.png]]
*** Rain
#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)
  plotfile = "rain.png"

  dfo_max_day = df_outside.resample('1D').max()
  dfo_min_day = df_outside.resample('1D').min()
  dfr_sum_day = df_rain.resample('1D').sum()

  fig, (ax2, ax) = plt.subplots(2, 1, sharex=True, figsize=(15, 7))

  ax2.plot(dfo_min_day.index.to_pydatetime(), dfo_min_day.Humidity, label="Daily min")
  ax2.plot(dfo_max_day.index.to_pydatetime(), dfo_max_day.Humidity, label="Daily max")
  ax2.legend()
  ax2.set(
      ylabel="Humidity, Percent"
  )

  ax.fill_between(dfr_sum_day.index.to_pydatetime(), dfr_sum_day.Rain,
                  label="Daily accum", step="mid")
  ax.legend()
  ax.set(
      xlabel="Date",
      ylabel="Rain, mm"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:rain.png]]

*** Organize by week
#+begin_src python :return plotfile :results file :exports both
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "co2-by-week.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(2, 1, sharex=True, figsize=(15, 7))
  for name, group in df.groupby((df.index.year, df.index.week)):
      start_day= group.index.min().to_pydatetime()
      #convert date to week age
      Xs = mdates.date2num(group.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      axes[0].plot(Xs, group.Noise, lw=0.1, alpha=0.2, color='k')
      axes[1].plot(Xs, group.CO2, lw=0.1, alpha=0.3, color='k')
  axes[1].set_xticklabels(weekday_names)
  axes[1].set_xticks(range(0, len(weekday_names)))
  axes[0].set(
      ylim=[30.0, 80.0],
      ylabel="Noise, dB",
  )
  axes[1].set(
      xlim=[-0.1, 7.1], ylim=[300.0, 1000.0],
      xlabel="Day of week", ylabel="CO2, ppm",
  )
  for ax in axes:
      ax.xaxis.set_minor_locator(AutoMinorLocator(8))
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:co2-by-week.png]]

+ CO2 comes from breathing and cooking
  + We can see spikes for breakfast, lunch, and tea
  + No spike at lunchtime on Saturday because we have salad
  + Big spike for breakfast pancakes on Sunday 

#+begin_src python :return plotfile :results file :exports both
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "rain-by-week.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df_inside = df_inside.resample("10T").mean()
  df_outside = df_outside.resample("10T").mean()
  df_rain = df_rain.resample("10T").sum()

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(2, 1, sharex=True, figsize=(15, 7))
  for name, group in df.groupby((df.index.year, df.index.week)):
      if not np.any(group.Rain):
          continue # skip dry weeks
      start_day= group.index.min().to_pydatetime()
      #convert date to week age
      Xs = mdates.date2num(group.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      group_by_hr = group.resample("1H").sum()
      Xs_by_hr = mdates.date2num(group_by_hr.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      group_by_hr.Rain[group_by_hr.Rain==0.0] = np.nan
      # axes[0].plot(Xs, group.Rain, '.', lw=1.0, alpha=0.2, color='k')
      axes[0].plot(Xs_by_hr, group_by_hr.Rain, 'o', mec="none", lw=1.0, alpha=0.5)
      axes[1].plot(Xs, group["Humidity out"], lw=0.2, alpha=0.7, color='k')
  axes[1].set_xticklabels(weekday_names)
  axes[1].set_xticks(range(0, len(weekday_names)))
  axes[0].set(
      ylim=[-0.1, 30.1],
      ylabel="Rain, mm / hour",
  )
  axes[1].set(
      xlim=[-0.1, 7.1], ylim=[0.0, 100.0],
      xlabel="Day of week", ylabel="Humidity, %",
  )
  for ax in axes:
      ax.xaxis.set_minor_locator(AutoMinorLocator(8))
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:rain-by-week.png]]

*** Two-factor pair graphs

Correlations between selected measurements.  This takes about a 20 seconds to run.
#+BEGIN_SRC python :return figfile :results file :exports both
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  sns.set_color_codes('dark')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)

  figfile = "weather-pairplot.png"

  # Resample by day and by hour
  dfi_max_day = df_inside.resample('1D').max()
  dfi_min_day = df_inside.resample('1D').min()
  dfi_med_hr = df_inside.resample('1H').mean()

  dfo_med_hr = df_outside.resample('1H').mean()

  # Restrict to afternoons, 12am to 5pm
  # pm_indices = dfi_med_hr.index.indexer_between_time('12:00', '17:00')

  # Restrict to daytime: 
  day_indices = dfi_med_hr.index.indexer_between_time('07:00', '19:00')

  df = dfi_med_hr.join(dfo_med_hr, rsuffix=" out")
  df = df.iloc[day_indices]
  df = df.fillna(method='bfill')
  # df = dfi_min_day
  variables = ['Temperature', 'Temperature out', 'CO2', 'Humidity', 'Humidity out', 'Noise', 'Pressure']
  g = sns.PairGrid(df, vars=variables, size=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.1, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=10)
  g = g.map_diag(plt.hist)
  g.fig.suptitle("Hourly means, daytime only (7AM-7PM)")
  g.savefig(figfile)


  # Repeat for night time
  night_indices = dfi_med_hr.index.indexer_between_time('19:00', '07:00')
  df = dfi_med_hr.join(dfo_med_hr, rsuffix=" out")
  df = df.iloc[night_indices]
  df = df.fillna(method='bfill')
  variables = ['Temperature', 'Temperature out', 'CO2', 'Humidity', 'Humidity out', 'Noise', 'Pressure']
  g = sns.PairGrid(df, vars=variables, size=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.1, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=10)
  g = g.map_diag(plt.hist)
  g.fig.suptitle("Hourly means, nighttime only (7PM-7AM)")
  g.savefig(figfile.replace(".png", "-night.png"))

#+END_SRC

#+RESULTS:
[[file:weather-pairplot.png]]

Also, the night-time version:
[[file:weather-pairplot-night.png]]
