#+PROPERTY: header-args    :exports both
* Getting my weather data from Netatmos station

** Installing Python netatmo api library
+ There are two
+ This one seems the best
  + https://github.com/rene-d/netatmo
  + [[file:~/Source/netatmo/]]
** Setting credentials
+ These are in my [[file:~/.netatmorc]]
+ Passwords and keys are also stored in 1Password vault
** Available stations
#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/src/netatmo/netatmo.py list
#+END_SRC

#+RESULTS:
: 1 station 70:ee:50:22:ce:e6 Privada Hijos del EjÃ©rcito (indoor) Morelia MX
:    module 70:ee:50:22:ce:e6 indoor Temperature,CO2,Humidity,Noise,Pressure
:    module 05:00:00:02:d3:6c Rain Gauge Rain
:    module 02:00:00:63:0a:7e Outdoor Module Temperature,Humidity

Note that previous outdoor module was
: module 02:00:00:22:b8:7e outdoor Temperature,Humidity
I still have to work out how to get the data from that

** DONE Deal with the rain gauge
CLOSED: [2020-03-15 Sun 22:54]
- This shows up in the available stations, but I am not sure how to grab the data from it

#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/netatmo.py dump
#+END_SRC

#+RESULTS:
#+begin_example
station Privada Hijos del EjÃ©rcito (indoor)
          date_setup : 1520632818 - 2018-03-09 16:00:18
          last_setup : 1520632818 - 2018-03-09 16:00:18
        last_upgrade : 1520632820 - 2018-03-09 16:00:20
               place : Morelia MX / alt 1921
         wifi_status : 62
   last_status_store : 1654457799 - 2022-06-05 14:36:39
module indoor - Main device
                 _id : 70:ee:50:22:ce:e6
           data_type : ['Temperature', 'CO2', 'Humidity', 'Noise', 'Pressure']
    AbsolutePressure > 803.1
       date_max_temp > 1654457462 - 2022-06-05 14:31:02
       date_min_temp > 1654433546 - 2022-06-05 07:52:26
            max_temp > 26.5
            min_temp > 23.2
      pressure_trend > stable
          temp_trend > up
            time_utc > 1654457764 - 2022-06-05 14:36:04
                 CO2 = 616
            Humidity = 48
               Noise = 35
            Pressure = 1013.7
         Temperature = 26.5
module Rain Gauge - Rain Gauge
                 _id : 05:00:00:02:d3:6c
           data_type : ['Rain']
          last_setup : 1523057640 - 2018-04-06 18:34:00
            firmware : 12
           rf_status : 72 (90=low, 60=highest)
     battery_percent : 89 %
        last_message : 1654457792 - 2018-04-06 18:34:00
           last_seen : 1654457792 - 2018-04-06 18:34:00
          sum_rain_1 > 0
         sum_rain_24 > 0
            time_utc > 1654457754 - 2022-06-05 14:35:54
                Rain = 0
module Outdoor Module - Outdoor
                 _id : 02:00:00:63:0a:7e
           data_type : ['Temperature', 'Humidity']
          last_setup : 1639677415 - 2021-12-16 11:56:55
            firmware : 50
           rf_status : 83 (90=low, 60=highest)
     battery_percent : 84 %
        last_message : 1654457792 - 2021-12-16 11:56:55
           last_seen : 1654457773 - 2021-12-16 11:56:55
       date_max_temp > 1654457722 - 2022-06-05 14:35:22
       date_min_temp > 1654432601 - 2022-06-05 07:36:41
            max_temp > 30.8
            min_temp > 19.7
          temp_trend > up
            time_utc > 1654457722 - 2022-06-05 14:35:22
            Humidity = 36
         Temperature = 30.8
{'body': {'1654456252': [26.3, 631, 49, 35, 1014.3], '1654456555': [26.3, 626, 49, 35, 1014.2], '1654456860': [26.4, 629, 48, 36, 1014.1], '1654457162': [26.4, 625, 48, 35, 1013.9], '1654457462': [26.5, 613, 48, 35, 1013.8], '1654457764': [26.5, 616, 48, 35, 1013.7]}, 'status': 'ok', 'time_exec': 0.22655606269836426, 'time_server': 1654458003}
{'body': {'1654456253': [0], '1654456547': [0], '1654456858': [0], '1654457153': [0], '1654457459': [0], '1654457754': [0]}, 'status': 'ok', 'time_exec': 0.5860848426818848, 'time_server': 1654458005}
{'body': {'1654456233': [30.6, 35], '1654456541': [30.6, 34], '1654456851': [30.5, 36], '1654457159': [30.6, 36], '1654457414': [30.6, 36], '1654457722': [30.8, 36]}, 'status': 'ok', 'time_exec': 0.2695600986480713, 'time_server': 1654458006}
#+end_example

So the ~dump~ command works fine.  We just need to work out how to change the ~fetch~ command. 

This implementation is just copied from ~netatmo.fetch~, but changing the necessary parameters to fetch data from the rain gauge. 

#+begin_src python :tangle netatmo-fetch-rain.py
  import sys
  sys.path.append("/Users/will/Source/netatmo/src/netatmo")
  import netatmo

  def fetch_rain():
      """
          retrieve measures from rain station and append them to csv files
      """
      ws = netatmo.WeatherStation(netatmo.DEFAULT_RC_FILE)
      if not ws.get_data():
          return
      station = ws.station_by_name()
      rainmodule = station['modules'][0]
      print("module_id    : {}".format(rainmodule['_id']))
      print("module_name  : {}".format(rainmodule['module_name']))
      print("data_type    : {}".format(rainmodule['data_type']))

      data_type = ["Rain"]
      netatmo.dl_csv(ws, "netatmo_rain.csv",j
                     station['_id'], rainmodule['_id'],
                     data_type, rainmodule['dashboard_data']['time_utc'])


  if __name__ == "__main__":
      fetch_rain()

#+end_src

#+RESULTS:
: None

#+begin_src sh :results verbatim :exports both
python netatmo-fetch-rain.py
#+end_src

#+RESULTS:
#+begin_example
module_id    : 05:00:00:02:d3:6c
module_name  : Rain Gauge
data_type    : ['Rain']
getmeasure 1 date_begin=1628257366 Fri Aug  6 08:42:46 2021
getmeasure 2 date_begin=1628572298 Tue Aug 10 00:11:38 2021
getmeasure 3 date_begin=1628881199 Fri Aug 13 13:59:59 2021
getmeasure 4 date_begin=1629189131 Tue Aug 17 03:32:11 2021
getmeasure 5 date_begin=1629497589 Fri Aug 20 17:13:09 2021
getmeasure 6 date_begin=1629804702 Tue Aug 24 06:31:42 2021
getmeasure 7 date_begin=1630111686 Fri Aug 27 19:48:06 2021
getmeasure 8 date_begin=1630419144 Tue Aug 31 09:12:24 2021
getmeasure 9 date_begin=1630725809 Fri Sep  3 22:23:29 2021
getmeasure 10 date_begin=1631033843 Tue Sep  7 11:57:23 2021
getmeasure 11 date_begin=1631341244 Sat Sep 11 01:20:44 2021
getmeasure 12 date_begin=1631647965 Tue Sep 14 14:32:45 2021
getmeasure 13 date_begin=1631956475 Sat Sep 18 04:14:35 2021
getmeasure 14 date_begin=1632264536 Tue Sep 21 17:48:56 2021
getmeasure 15 date_begin=1632573212 Sat Sep 25 07:33:32 2021
getmeasure 16 date_begin=1632881414 Tue Sep 28 21:10:14 2021
getmeasure 17 date_begin=1633191195 Sat Oct  2 11:13:15 2021
getmeasure 18 date_begin=1633499512 Wed Oct  6 00:51:52 2021
getmeasure 19 date_begin=1633807599 Sat Oct  9 14:26:39 2021
getmeasure 20 date_begin=1634115648 Wed Oct 13 04:00:48 2021
getmeasure 21 date_begin=1634423669 Sat Oct 16 17:34:29 2021
getmeasure 22 date_begin=1634731641 Wed Oct 20 07:07:21 2021
getmeasure 23 date_begin=1635040279 Sat Oct 23 20:51:19 2021
getmeasure 24 date_begin=1635347929 Wed Oct 27 10:18:49 2021
getmeasure 25 date_begin=1635656074 Sat Oct 30 23:54:34 2021
getmeasure 26 date_begin=1635964615 Wed Nov  3 12:36:55 2021
getmeasure 27 date_begin=1636272624 Sun Nov  7 02:10:24 2021
getmeasure 28 date_begin=1636581505 Wed Nov 10 15:58:25 2021
getmeasure 29 date_begin=1636890246 Sun Nov 14 05:44:06 2021
getmeasure 30 date_begin=1637199299 Wed Nov 17 19:34:59 2021
getmeasure 31 date_begin=1637507148 Sun Nov 21 09:05:48 2021
getmeasure 32 date_begin=1637816311 Wed Nov 24 22:58:31 2021
getmeasure 33 date_begin=1638125602 Sun Nov 28 12:53:22 2021
getmeasure 34 date_begin=1638433829 Thu Dec  2 02:30:29 2021
getmeasure 35 date_begin=1638741364 Sun Dec  5 15:56:04 2021
getmeasure 36 date_begin=1639048222 Thu Dec  9 05:10:22 2021
getmeasure 37 date_begin=1639357205 Sun Dec 12 19:00:05 2021
getmeasure 38 date_begin=1639665881 Thu Dec 16 08:44:41 2021
getmeasure 39 date_begin=1639971808 Sun Dec 19 21:43:28 2021
getmeasure 40 date_begin=1640280202 Thu Dec 23 11:23:22 2021
getmeasure 41 date_begin=1640587392 Mon Dec 27 00:43:12 2021
getmeasure 42 date_begin=1640896286 Thu Dec 30 14:31:26 2021
getmeasure 43 date_begin=1641203763 Mon Jan  3 03:56:03 2022
getmeasure 44 date_begin=1641511875 Thu Jan  6 17:31:15 2022
getmeasure 45 date_begin=1641820153 Mon Jan 10 07:09:13 2022
getmeasure 46 date_begin=1642128624 Thu Jan 13 20:50:24 2022
getmeasure 47 date_begin=1642436608 Mon Jan 17 10:23:28 2022
getmeasure 48 date_begin=1642744348 Thu Jan 20 23:52:28 2022
getmeasure 49 date_begin=1643053305 Mon Jan 24 13:41:45 2022
getmeasure 50 date_begin=1643361366 Fri Jan 28 03:16:06 2022
getmeasure 51 date_begin=1643670054 Mon Jan 31 17:00:54 2022
getmeasure 52 date_begin=1643978013 Fri Feb  4 06:33:33 2022
getmeasure 53 date_begin=1644286047 Mon Feb  7 20:07:27 2022
getmeasure 54 date_begin=1644594512 Fri Feb 11 09:48:32 2022
getmeasure 55 date_begin=1644903024 Mon Feb 14 23:30:24 2022
getmeasure 56 date_begin=1645211331 Fri Feb 18 13:08:51 2022
getmeasure 57 date_begin=1645519097 Tue Feb 22 02:38:17 2022
getmeasure 58 date_begin=1645826888 Fri Feb 25 16:08:08 2022
getmeasure 59 date_begin=1646135026 Tue Mar  1 05:43:46 2022
getmeasure 60 date_begin=1646442856 Fri Mar  4 19:14:16 2022
getmeasure 61 date_begin=1646751595 Tue Mar  8 08:59:55 2022
getmeasure 62 date_begin=1647060310 Fri Mar 11 22:45:10 2022
getmeasure 63 date_begin=1647368576 Tue Mar 15 12:22:56 2022
getmeasure 64 date_begin=1647675239 Sat Mar 19 01:33:59 2022
getmeasure 65 date_begin=1647984510 Tue Mar 22 15:28:30 2022
getmeasure 66 date_begin=1648293443 Sat Mar 26 05:17:23 2022
getmeasure 67 date_begin=1648601926 Tue Mar 29 18:58:46 2022
getmeasure 68 date_begin=1648911333 Sat Apr  2 08:55:33 2022
getmeasure 69 date_begin=1649220514 Tue Apr  5 23:48:34 2022
getmeasure 70 date_begin=1649528689 Sat Apr  9 13:24:49 2022
getmeasure 71 date_begin=1649835931 Wed Apr 13 02:45:31 2022
getmeasure 72 date_begin=1650144073 Sat Apr 16 16:21:13 2022
getmeasure 73 date_begin=1650452378 Wed Apr 20 05:59:38 2022
getmeasure 74 date_begin=1650762183 Sat Apr 23 20:03:03 2022
getmeasure 75 date_begin=1651071949 Wed Apr 27 10:05:49 2022
getmeasure 76 date_begin=1651386926 Sun May  1 01:35:26 2022
getmeasure 77 date_begin=1651696313 Wed May  4 15:31:53 2022
getmeasure 78 date_begin=1652005995 Sun May  8 05:33:15 2022
getmeasure 79 date_begin=1652321847 Wed May 11 21:17:27 2022
getmeasure 80 date_begin=1652632478 Sun May 15 11:34:38 2022
getmeasure 81 date_begin=1652951173 Thu May 19 04:06:13 2022
getmeasure 82 date_begin=1653263925 Sun May 22 18:58:45 2022
getmeasure 83 date_begin=1653577341 Thu May 26 10:02:21 2022
getmeasure 84 date_begin=1653885390 Sun May 29 23:36:30 2022
getmeasure 85 date_begin=1654192990 Thu Jun  2 13:03:10 2022
#+end_example


*** Previous results before swapping outdoor module
#+RESULTS:
#+begin_example
station Privada Hijos del EjÃ©rcito
          date_setup : 1520632818 - 2018-03-09 16:00:18
          last_setup : 1520632818 - 2018-03-09 16:00:18
        last_upgrade : 1520632820 - 2018-03-09 16:00:20
               place : Morelia MX / alt 1920
         wifi_status : 61
   last_status_store : 1563407025 - 2019-07-17 18:43:45
module indoor - Main device
                 _id : 70:ee:50:22:ce:e6
           data_type : ['Temperature', 'CO2', 'Humidity', 'Noise', 'Pressure']
    AbsolutePressure > 807.5
       date_max_temp > 1563385850 - 2019-07-17 12:50:50
       date_min_temp > 1563372817 - 2019-07-17 09:13:37
            max_temp > 23.3
            min_temp > 20.1
      pressure_trend > down
          temp_trend > down
            time_utc > 1563407011 - 2019-07-17 18:43:31
                 CO2 = 497
            Humidity = 63
               Noise = 36
            Pressure = 1019.1
         Temperature = 22.4
module outdoor - Outdoor
                 _id : 02:00:00:22:b8:7e
           data_type : ['Temperature', 'Humidity']
          last_setup : 1520632819 - 2018-03-09 16:00:19
            firmware : 44
           rf_status : 73 (90=low, 60=highest)
     battery_percent : 65 %
        last_message : 1563407021 - 2018-03-09 16:00:19
           last_seen : 1563407015 - 2018-03-09 16:00:19
       date_max_temp > 1563385207 - 2019-07-17 12:40:07
       date_min_temp > 1563366743 - 2019-07-17 07:32:23
            max_temp > 26.7
            min_temp > 17.3
          temp_trend > down
            time_utc > 1563406964 - 2019-07-17 18:42:44
            Humidity = 73
         Temperature = 20.5
module Rain Gauge - Rain Gauge
                 _id : 05:00:00:02:d3:6c
           data_type : ['Rain']
          last_setup : 1523057640 - 2018-04-06 18:34:00
            firmware : 8
           rf_status : 72 (90=low, 60=highest)
     battery_percent : 78 %
        last_message : 1563407021 - 2018-04-06 18:34:00
           last_seen : 1563407021 - 2018-04-06 18:34:00
          sum_rain_1 > 0.30300000000000005
         sum_rain_24 > 19.7
            time_utc > 1563407009 - 2019-07-17 18:43:29
                Rain = 0.303
{'body': {'1563405322': [22.7, 507, 62, 36, 1018.7], '1563405622': [22.6, 499, 62, 36, 1019], '1563405922': [22.6, 501, 62, 35, 1019.1], '1563406226': [22.5, 507, 63, 36, 1019.2], '1563406527': [22.5, 503, 62, 35, 1019.2], '1563406831': [22.4, 498, 62, 35, 1019.1], '1563407011': [22.4, 497, 63, 36, 1019.1]}, 'status': 'ok', 'time_exec': 0.030382871627807617, 'time_server': 1563407073}
{'body': {'1563405272': [21.2, 72], '1563405579': [21, 71], '1563405887': [20.8, 71], '1563406195': [20.8, 71], '1563406502': [20.6, 70], '1563406810': [20.5, 72], '1563406964': [20.5, 73]}, 'status': 'ok', 'time_exec': 0.018594026565551758, 'time_server': 1563407074}
{'body': {'1563405317': [0], '1563405611': [0], '1563405919': [0], '1563406227': [0], '1563406521': [0], '1563406829': [0], '1563407009': [0.303]}, 'status': 'ok', 'time_exec': 0.031126976013183594, 'time_server': 1563407074}
#+end_example


** Download data into CSV files
Run this periodically - it should just grab the new data (also run the rain gauge version above)

#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/src/netatmo/netatmo.py fetch
#+END_SRC

#+RESULTS:
#+begin_example
station_name : Privada Hijos del EjÃ©rcito (indoor)
device_id    : 70:ee:50:22:ce:e6
module_name  : indoor
data_type    : ['Temperature', 'CO2', 'Humidity', 'Noise', 'Pressure']
module_id    : 05:00:00:02:d3:6c
module_name  : Rain Gauge
data_type    : ['Rain']
getmeasure 1 date_begin=1628257369 Fri Aug  6 08:42:49 2021
getmeasure 2 date_begin=1628564669 Mon Aug  9 22:04:29 2021
getmeasure 3 date_begin=1628872452 Fri Aug 13 11:34:12 2021
getmeasure 4 date_begin=1629180584 Tue Aug 17 01:09:44 2021
getmeasure 5 date_begin=1629489104 Fri Aug 20 14:51:44 2021
getmeasure 6 date_begin=1629796022 Tue Aug 24 04:07:02 2021
getmeasure 7 date_begin=1630103038 Fri Aug 27 17:23:58 2021
getmeasure 8 date_begin=1630410396 Tue Aug 31 06:46:36 2021
getmeasure 9 date_begin=1630717270 Fri Sep  3 20:01:10 2021
getmeasure 10 date_begin=1631025100 Tue Sep  7 09:31:40 2021
getmeasure 11 date_begin=1631332196 Fri Sep 10 22:49:56 2021
getmeasure 12 date_begin=1631638923 Tue Sep 14 12:02:03 2021
getmeasure 13 date_begin=1631947123 Sat Sep 18 01:38:43 2021
getmeasure 14 date_begin=1632255181 Tue Sep 21 15:13:01 2021
getmeasure 15 date_begin=1632563867 Sat Sep 25 04:57:47 2021
getmeasure 16 date_begin=1632872055 Tue Sep 28 18:34:15 2021
getmeasure 17 date_begin=1633181530 Sat Oct  2 08:32:10 2021
getmeasure 18 date_begin=1633489849 Tue Oct  5 22:10:49 2021
getmeasure 19 date_begin=1633797951 Sat Oct  9 11:45:51 2021
getmeasure 20 date_begin=1634105687 Wed Oct 13 01:14:47 2021
getmeasure 21 date_begin=1634413708 Sat Oct 16 14:48:28 2021
getmeasure 22 date_begin=1634721692 Wed Oct 20 04:21:32 2021
getmeasure 23 date_begin=1635030317 Sat Oct 23 18:05:17 2021
getmeasure 24 date_begin=1635337959 Wed Oct 27 07:32:39 2021
getmeasure 25 date_begin=1635645516 Sat Oct 30 20:58:36 2021
getmeasure 26 date_begin=1635954054 Wed Nov  3 09:40:54 2021
getmeasure 27 date_begin=1636262056 Sat Nov  6 23:14:16 2021
getmeasure 28 date_begin=1636570940 Wed Nov 10 13:02:20 2021
getmeasure 29 date_begin=1636879672 Sun Nov 14 02:47:52 2021
getmeasure 30 date_begin=1637188732 Wed Nov 17 16:38:52 2021
getmeasure 31 date_begin=1637496577 Sun Nov 21 06:09:37 2021
getmeasure 32 date_begin=1637805144 Wed Nov 24 19:52:24 2021
getmeasure 33 date_begin=1638114430 Sun Nov 28 09:47:10 2021
getmeasure 34 date_begin=1638422062 Wed Dec  1 23:14:22 2021
getmeasure 35 date_begin=1638729596 Sun Dec  5 12:39:56 2021
getmeasure 36 date_begin=1639035842 Thu Dec  9 01:44:02 2021
getmeasure 37 date_begin=1639344530 Sun Dec 12 15:28:50 2021
getmeasure 38 date_begin=1639653210 Thu Dec 16 05:13:30 2021
getmeasure 39 date_begin=1639959121 Sun Dec 19 18:12:01 2021
getmeasure 40 date_begin=1640267517 Thu Dec 23 07:51:57 2021
getmeasure 41 date_begin=1640574404 Sun Dec 26 21:06:44 2021
getmeasure 42 date_begin=1640883300 Thu Dec 30 10:55:00 2021
getmeasure 43 date_begin=1641190490 Mon Jan  3 00:14:50 2022
getmeasure 44 date_begin=1641498871 Thu Jan  6 13:54:31 2022
getmeasure 45 date_begin=1641806867 Mon Jan 10 03:27:47 2022
getmeasure 46 date_begin=1642115335 Thu Jan 13 17:08:55 2022
getmeasure 47 date_begin=1642423021 Mon Jan 17 06:37:01 2022
getmeasure 48 date_begin=1642730850 Thu Jan 20 20:07:30 2022
getmeasure 49 date_begin=1643039760 Mon Jan 24 09:56:00 2022
getmeasure 50 date_begin=1643347484 Thu Jan 27 23:24:44 2022
getmeasure 51 date_begin=1643656169 Mon Jan 31 13:09:29 2022
getmeasure 52 date_begin=1643964139 Fri Feb  4 02:42:19 2022
getmeasure 53 date_begin=1644272155 Mon Feb  7 16:15:55 2022
getmeasure 54 date_begin=1644580617 Fri Feb 11 05:56:57 2022
getmeasure 55 date_begin=1644888840 Mon Feb 14 19:34:00 2022
getmeasure 56 date_begin=1645197130 Fri Feb 18 09:12:10 2022
getmeasure 57 date_begin=1645504903 Mon Feb 21 22:41:43 2022
getmeasure 58 date_begin=1645813050 Fri Feb 25 12:17:30 2022
getmeasure 59 date_begin=1646120839 Tue Mar  1 01:47:19 2022
getmeasure 60 date_begin=1646428674 Fri Mar  4 15:17:54 2022
getmeasure 61 date_begin=1646737403 Tue Mar  8 05:03:23 2022
getmeasure 62 date_begin=1647046418 Fri Mar 11 18:53:38 2022
getmeasure 63 date_begin=1647354378 Tue Mar 15 08:26:18 2022
getmeasure 64 date_begin=1647660745 Fri Mar 18 21:32:25 2022
getmeasure 65 date_begin=1647970015 Tue Mar 22 11:26:55 2022
getmeasure 66 date_begin=1648278948 Sat Mar 26 01:15:48 2022
getmeasure 67 date_begin=1648587442 Tue Mar 29 14:57:22 2022
getmeasure 68 date_begin=1648896831 Sat Apr  2 04:53:51 2022
getmeasure 69 date_begin=1649206025 Tue Apr  5 19:47:05 2022
getmeasure 70 date_begin=1649514367 Sat Apr  9 09:26:07 2022
getmeasure 71 date_begin=1649821443 Tue Apr 12 22:44:03 2022
getmeasure 72 date_begin=1650129866 Sat Apr 16 12:24:26 2022
getmeasure 73 date_begin=1650437885 Wed Apr 20 01:58:05 2022
getmeasure 74 date_begin=1650745259 Sat Apr 23 15:20:59 2022
getmeasure 75 date_begin=1651053523 Wed Apr 27 04:58:43 2022
getmeasure 76 date_begin=1651362181 Sat Apr 30 18:43:01 2022
getmeasure 77 date_begin=1651671553 Wed May  4 08:39:13 2022
getmeasure 78 date_begin=1651980340 Sat May  7 22:25:40 2022
getmeasure 79 date_begin=1652288320 Wed May 11 11:58:40 2022
getmeasure 80 date_begin=1652596453 Sun May 15 01:34:13 2022
getmeasure 81 date_begin=1652905284 Wed May 18 15:21:24 2022
getmeasure 82 date_begin=1653213754 Sun May 22 05:02:34 2022
getmeasure 83 date_begin=1653521892 Wed May 25 18:38:12 2022
getmeasure 84 date_begin=1653829903 Sun May 29 08:11:43 2022
getmeasure 85 date_begin=1654137399 Wed Jun  1 21:36:39 2022
getmeasure 86 date_begin=1654445171 Sun Jun  5 11:06:11 2022
getmeasure 1 date_begin=1628257328 Fri Aug  6 08:42:08 2021
#+end_example
** DONE Make graphs
CLOSED: [2018-03-11 Sun 00:02]
*** Inside and outside temperature and humidity
#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)

  plotfile = "weather-test.png"

  fig, (ax2, ax) = plt.subplots(2, 1, sharex=True, figsize=(15, 7))

  ax2.plot(df_inside.index.to_pydatetime(), df_inside.Humidity, label="inside", lw=0.2)
  ax2.plot(df_outside.index.to_pydatetime(), df_outside.Humidity, label="outside", lw=0.2)
  ax2.legend()
  ax2.set(
      ylabel="Humidity, Percent"
  )

  ax.plot(df_inside.index.to_pydatetime(), df_inside.Temperature, label="inside", lw=0.2)
  ax.plot(df_outside.index.to_pydatetime(), df_outside.Temperature, label="outside", lw=0.2)
  ax.legend()
  ax.set(
      xlabel="Date",
      ylabel="Temperature, Celsius"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:weather-test.png]]
*** Pressure, CO_2, and noise 


#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df = df_inside.join(df_outside, rsuffix=" out")
  # Correct the pressures from before 2019-07
  lowmask = df.Pressure < 1000.0
  df.Pressure[lowmask] += 212.0

  df_max_day = df.resample('1D').max()
  df_min_day = df.resample('1D').min()

  plotfile = "noise-test.png"

  fig, (ax3, ax2, ax) = plt.subplots(3, 1, sharex=True, figsize=(15, 10))


  ax3.fill_between(df.index.to_pydatetime(), df.Pressure,
                   step="mid", y2=800.0, label="Pressure")
  ax3.plot(df_max_day.index.to_pydatetime(), df_max_day.Pressure,
           label="_nolabel", color="r")
  ax3.plot(df_min_day.index.to_pydatetime(), df_min_day.Pressure,
           label="_nolabel", color="w")
  ax3.legend(loc="upper left")
  ax3.set(
      ylabel="Pressure, mB",
      ylim=[1010.0, 1030.0],
  )

  ax2.fill_between(df.index.to_pydatetime(), df.CO2,
                   step="mid", y2=330.0, label="CO2")
  ax2.plot(df_max_day.index.to_pydatetime(), df_max_day.CO2,
           label="_nolabel", color="r")
  ax2.plot(df_min_day.index.to_pydatetime(), df_min_day.CO2,
           label="_nolabel", color="w")
  ax2.legend(loc="upper left")
  ax2.set(
      ylabel="CO$_{2}$, ppm",
      ylim=[310.0, 1000.0],
  )

  ax.fill_between(df.index.to_pydatetime(), df.Noise, y2=33.0, label="Noise")
  ax.legend(loc="upper left")
  ax.set(
      xlabel="Date",
      ylabel="Noise, dB"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:noise-test.png]]
*** Rain
#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)
  plotfile = "rain.png"

  dfo_max_day = df_outside.resample('1D').max()
  dfo_min_day = df_outside.resample('1D').min()
  dfr_sum_day = df_rain.resample('1D').sum()

  fig, (ax2, ax) = plt.subplots(2, 1, sharex=True, figsize=(15, 7))

  ax2.plot(dfo_min_day.index.to_pydatetime(), dfo_min_day.Humidity, label="Daily min")
  ax2.plot(dfo_max_day.index.to_pydatetime(), dfo_max_day.Humidity, label="Daily max")
  ax2.legend()
  ax2.set(
      ylabel="Humidity, Percent"
  )

  ax.fill_between(dfr_sum_day.index.to_pydatetime(), dfr_sum_day.Rain,
                  label="Daily accum", step="mid")
  ax.legend()
  ax.set(
      xlabel="Date",
      ylabel="Rain, mm"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:rain.png]]

*** Organize by week
#+begin_src python :return plotfile :results file :exports both
  import sys
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "co2-by-week.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(2, 1, sharex=True, figsize=(15, 7))
  co2_stack, noise_stack, Xs_stack = [], [], []
  for name, group in df.groupby([df.index.year, df.index.week]):
      start_day= group.index.min().to_pydatetime()
      #convert date to week age
      Xs = mdates.date2num(group.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      mean_by_hr = group.resample("1H").mean()
      mean_by_10m = group.resample("10T").mean()
      Xs_by_hr = mdates.date2num(mean_by_hr.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      Xs_by_10m = mdates.date2num(mean_by_10m.index.to_pydatetime()) \
          - mdates.date2num(start_day)

      axes[0].plot(Xs_by_10m, mean_by_10m.Noise, lw=0.1, alpha=0.2, color='k')
      axes[1].plot(Xs_by_10m,  mean_by_10m.CO2, lw=0.1, alpha=0.3, color='k')
      if len(Xs_by_10m) == 24*7*6:
          # Only use full-week time series for calculating the means
          co2_stack.append(mean_by_10m.CO2)
          noise_stack.append(mean_by_10m.Noise)
          Xs_stack.append(Xs_by_10m)

  co2_mean = np.nanmean(co2_stack, axis=0)
  noise_mean = np.nanmean(noise_stack, axis=0)
  Xs_mean = np.nanmean(Xs_stack, axis=0)
  axes[0].plot(Xs_mean, noise_mean, lw=2, color="r", alpha=0.4)
  axes[1].plot(Xs_mean, co2_mean, lw=2, color="r", alpha=0.4)
  axes[1].set_xticklabels(weekday_names)
  axes[1].set_xticks(range(0, len(weekday_names)))
  axes[0].set(
      ylim=[30.0, 70.0],
      ylabel="Noise, dB",
  )
  axes[1].set(
      xlim=[-0.1, 7.1], ylim=[300.0, 900.0],
      xlabel="Day of week", ylabel="CO2, ppm",
  )
  for ax in axes:
      ax.xaxis.set_minor_locator(AutoMinorLocator(8))
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:co2-by-week.png]]

+ CO2 comes from breathing and cooking
  + We can see spikes for breakfast, lunch, and tea
  + No spike at lunchtime on Saturday because we have salad
  + Big spike for breakfast pancakes on Sunday 

#+begin_src python :return plotfile :results file :exports both
  import sys
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "rain-by-week.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df_inside = df_inside.resample("10T").mean()
  df_outside = df_outside.resample("10T").mean()
  df_rain = df_rain.resample("10T").sum()

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(2, 1, sharex=True, figsize=(15, 7))
  humidity_stack = []
  for name, group in df.groupby([df.index.year, df.index.week]):
      if not np.any(group.Rain):
          continue # skip dry weeks
      start_day= group.index.min().to_pydatetime()
      #convert date to week age
      Xs = mdates.date2num(group.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      group_by_hr = group.resample("1H").sum()
      mean_by_hr = group.resample("1H").mean()
      if len(mean_by_hr) == 24*7:
          Xs_by_hr = mdates.date2num(group_by_hr.index.to_pydatetime()) \
              - mdates.date2num(start_day)
          group_by_hr.Rain[group_by_hr.Rain==0.0] = np.nan
          axes[0].plot(Xs_by_hr, group_by_hr.Rain, 'o', mec="none", lw=1.0, alpha=0.5)
          axes[1].plot(Xs, group["Humidity out"], lw=0.2, alpha=0.7, color='k')
          humidity_stack.append(mean_by_hr["Humidity out"].values)
  #sys.exit(repr(type(humidity_stack[0])))
  humidity = np.nanmean(humidity_stack, axis=0)
  axes[1].plot(Xs_by_hr, humidity, lw=2, color="r", alpha=0.4)
  axes[1].set_xticklabels(weekday_names)
  axes[1].set_xticks(range(0, len(weekday_names)))
  axes[0].set(
      ylim=[-0.1, 30.1],
      ylabel="Rain, mm / hour",
  )
  axes[1].set(
      xlim=[-0.1, 7.1], ylim=[0.0, 100.0],
      xlabel="Day of week", ylabel="Humidity, %",
  )
  for ax in axes:
      ax.xaxis.set_minor_locator(AutoMinorLocator(8))
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:rain-by-week.png]]



*** Inter-year comparisons

#+begin_src python :return plotfile :results file :exports both
  import sys
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "inter-year-weekly.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df_inside = df_inside.resample("1W").mean()
  df_outside = df_outside.resample("1W").mean()
  df_rain = df_rain.resample("1W").sum()

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(2, 1, sharex=True, figsize=(15, 7))
  humidity_stack = []
  for yearname, group in df.groupby(df.index.year):
      axes[0].plot(group.index.week, group.Rain,
                   'o', mec="none", lw=1.0, alpha=0.8,
                   label=yearname,
      )
      axes[1].plot(group.index.week, group["Humidity out"], alpha=0.9, label=yearname)
  axes[0].legend()
  axes[1].legend()
  axes[0].set(
      ylim=[-1.0, None],
      ylabel="Rain, mm / week",
  )
  axes[1].set(
      xlim=[-0.1, 52.1], ylim=[0.0, 100.0],
      xlabel="Week", ylabel="Humidity, %",
  )
  for ax in axes:
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:inter-year-weekly.png]]


#+begin_src python :return plotfile :results file :exports both
  import sys
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "inter-year-accum.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df_inside = df_inside.resample("1D").min()
  df_outside = df_outside.resample("1D").min()
  df_rain = df_rain.resample("1D").sum()

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(3, 1, sharex=True, figsize=(15, 7))
  humidity_stack = []
  for yearname, group in df.groupby(df.index.year):
      axes[0].plot(group.index.dayofyear, group.Rain.cumsum(),
                   alpha=0.7,
                   label=yearname,
      )
      axes[1].plot(group.index.dayofyear, group["Humidity out"], alpha=0.7, label=yearname)
      axes[2].plot(group.index.dayofyear, group["Temperature out"], alpha=0.7, label=yearname)
  axes[0].set(
      ylim=[-1.0, None],
      ylabel="Cumulative rain, mm",
  )
  axes[1].set(
      ylim=[-1.0, 101.0],
      ylabel="Min Humidity, %",
  )
  axes[2].set(
      xlim=[-0.1, 365.1], ylim=[5.0, 25.0],
      xlabel="Day", ylabel="Min Temperature, C",
  )
  for ax in axes:
      ax.legend()
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:inter-year-accum.png]]

So, 2019 has half the rain of 2018
*** Two-factor pair graphs

Correlations between selected measurements.  This takes about about 2 mins to run now, so I save it to a file and run it in a terminal.

#+BEGIN_SRC python :return figfile :results file :exports both :tangle weather-2factor.py
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  sns.set_color_codes('dark')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  # Correct the pressures from before 2019-07
  lowmask = df_inside.Pressure < 1000.0
  df_inside.Pressure[lowmask] += 212.0


  figfile = "weather-pairplot.png"

  # Resample by day and by hour
  dfi_max_day = df_inside.resample('1D').max()
  dfi_min_day = df_inside.resample('1D').min()
  dfi_med_hr = df_inside.resample('1H').mean()

  dfo_med_hr = df_outside.resample('1H').mean()
  dfr_sum_hr = df_rain.resample("1H").sum()

  # Restrict to afternoons, 12am to 5pm
  # pm_indices = dfi_med_hr.index.indexer_between_time('12:00', '17:00')

  # Restrict to daytime: 
  day_indices = dfi_med_hr.index.indexer_between_time('07:00', '19:00')

  df = dfi_med_hr.join(dfo_med_hr, rsuffix=" out").join(dfr_sum_hr, rsuffix=" rain")
  df = df.iloc[day_indices]
  df = df.fillna(method='bfill')


  # df = dfi_min_day
  variables = ['Temperature', 'Temperature out', 'CO2', 'Humidity', 'Humidity out', 'Noise', 'Pressure', 'Rain']
  minmax = {
      'Temperature': [0, 35],
      'Temperature out': [0, 35],
      'CO2': [300, 1000],
      'Humidity': [0, 100],
      'Humidity out': [0, 100],
      'Noise': [30, 70],
      'Pressure': [1010, 1030],
      'Rain': [0.1, 25],
  }
  variables = list(minmax)
  g = sns.PairGrid(df, vars=variables, height=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.03, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=15)
  g = g.map_diag(plt.hist)
  # Make sure graph limits are always consistent
  for j, k in enumerate(variables):
      g.axes[j, j].set(xlim=minmax[k], ylim=minmax[k])
  g.fig.suptitle("Hourly means, daytime only (7AM-7PM)")
  g.savefig(figfile)


  # Repeat for night time
  night_indices = dfi_med_hr.index.indexer_between_time('19:00', '07:00')
  df = dfi_med_hr.join(dfo_med_hr, rsuffix=" out").join(dfr_sum_hr, rsuffix=" rain")
  df = df.iloc[night_indices]
  df = df.fillna(method='bfill')
  g = sns.PairGrid(df, vars=variables, size=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.03, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=15)
  g = g.map_diag(plt.hist)
  # Make sure graph limits are same for night and day
  for j, k in enumerate(variables):
      g.axes[j, j].set(xlim=minmax[k], ylim=minmax[k])
  g.fig.suptitle("Hourly means, nighttime only (7PM-7AM)")
  g.savefig(figfile.replace(".png", "-night.png"))

#+END_SRC

#+RESULTS:
[[file:weather-pairplot.png]]

Also, the night-time version:
[[file:weather-pairplot-night.png]]


#+BEGIN_SRC python :return figfile :results file :exports both :tangle weather-2factor-maxmin.py
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  sns.set_color_codes('dark')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  # Correct the pressures from before 2019-07
  lowmask = df_inside.Pressure < 1000.0
  df_inside.Pressure[lowmask] += 212.0


  figfile = "weather-pairplot-daily-max.png"

  # Resample by day and by hour
  dfi_max_day = df_inside.resample('1D').max()
  dfi_min_day = df_inside.resample('1D').min()
  dfi_med_hr = df_inside.resample('1H').mean()

  dfo_med_hr = df_outside.resample('1H').mean()
  dfo_max_day = df_outside.resample('1D').max()
  dfo_min_day = df_outside.resample('1D').min()

  dfr_sum_hr = df_rain.resample("1H").sum()
  dfr_max_day = df_rain.resample("1D").max()
  dfr_min_day = df_rain.resample("1D").min()

  # Restrict to afternoons, 12am to 5pm
  # pm_indices = dfi_med_hr.index.indexer_between_time('12:00', '17:00')


  df = dfi_max_day.join(dfo_max_day, rsuffix=" out").join(dfr_max_day, rsuffix=" rain")
  df = df.fillna(method='bfill')


  # df = dfi_min_day
  variables = ['Temperature', 'Temperature out', 'CO2', 'Humidity', 'Humidity out', 'Noise', 'Pressure', 'Rain']
  minmax = {
      'Temperature': [0, 35],
      'Temperature out': [0, 35],
      'CO2': [300, 1000],
      'Humidity': [0, 100],
      'Humidity out': [0, 100],
      'Noise': [30, 70],
      'Pressure': [1010, 1030],
      'Rain': [0.01, 5.0],
  }
  variables = list(minmax)
  g = sns.PairGrid(df, vars=variables, height=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.1, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=15)
  g = g.map_diag(plt.hist)
  # Make sure graph limits are always consistent
  for j, k in enumerate(variables):
      g.axes[j, j].set(xlim=minmax[k], ylim=minmax[k])
  g.fig.suptitle("Daily maxima")
  g.savefig(figfile)


  # Repeat for minmima
  df = dfi_min_day.join(dfo_min_day, rsuffix=" out").join(dfr_min_day, rsuffix=" rain")
  df = df.fillna(method='bfill')
  g = sns.PairGrid(df, vars=variables, size=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.1, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=15)
  g = g.map_diag(plt.hist)
  # Make sure graph limits are same for night and day
  for j, k in enumerate(variables):
      g.axes[j, j].set(xlim=minmax[k], ylim=minmax[k])
  g.fig.suptitle("Daily minima")
  g.savefig(figfile.replace("-max.png", "-min.png"))

#+END_SRC

#+RESULTS:
[[file:weather-pairplot-daily-max.png]]

[[file:weather-pairplot-daily-min.png]]
* Absolute humidity and COVID-19
+ This is calculated in a [[file:notebooks/COVID-19 versus the weather.ipynb][python notebook]].
  + With accompanying [[file:notebooks/COVID-19 versus the weather.py][pure python file]]
+ Summary graph
  [[file:notebooks/morelia-absolute-humidity-2018-to-2020.pdf]]
+ Re-run notebook
  #+begin_src sh
    jupyter nbconvert --to notebook --execute notebooks/COVID-19\ versus\ the\ weather.ipynb
  #+end_src
+ Re-run pure python version

  #+begin_src sh :dir notebooks
    python "COVID-19 versus the weather.py"
  #+end_src
  #+RESULTS:

+ Synchronize notebook and python version
  #+begin_src sh :dir notebooks :results verbatim
    jupytext --sync "COVID-19 versus the weather.py"
  #+end_src

  #+RESULTS:
  : [jupytext] Reading COVID-19 versus the weather.py
  : [jupytext] Loading input cells from 'COVID-19 versus the weather.py'
  : [jupytext] Loading output cells from 'COVID-19 versus the weather.ipynb'
  : [jupytext] Updating 'COVID-19 versus the weather.ipynb'
  : [jupytext] Updating 'COVID-19 versus the weather.py'
