#+PROPERTY: header-args    :exports both
* Getting my weather data from Netatmos station

** Installing Python netatmo api library
+ There are two
+ This one seems the best
  + https://github.com/rene-d/netatmo
  + [[file:~/Source/netatmo/]]
** Setting credentials
+ These are in my [[file:~/.netatmorc]]
+ Passwords and keys are also stored in 1Password vault
** Available stations
#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/src/netatmo/netatmo.py list
#+END_SRC

#+RESULTS:
: 1 station 70:ee:50:22:ce:e6 Privada Hijos del Ejército Morelia MX
:    module 70:ee:50:22:ce:e6 indoor Temperature,CO2,Humidity,Noise,Pressure
:    module 02:00:00:22:b8:7e outdoor Temperature,Humidity
:    module 05:00:00:02:d3:6c Rain Gauge Rain
** DONE Deal with the rain gauge
CLOSED: [2020-03-15 Sun 22:54]
- This shows up in the available stations, but I am not sure how to grab the data from it

#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/netatmo.py dump
#+END_SRC

#+RESULTS:
#+begin_example
station Privada Hijos del Ejército
          date_setup : 1520632818 - 2018-03-09 16:00:18
          last_setup : 1520632818 - 2018-03-09 16:00:18
        last_upgrade : 1520632820 - 2018-03-09 16:00:20
               place : Morelia MX / alt 1920
         wifi_status : 61
   last_status_store : 1563407025 - 2019-07-17 18:43:45
module indoor - Main device
                 _id : 70:ee:50:22:ce:e6
           data_type : ['Temperature', 'CO2', 'Humidity', 'Noise', 'Pressure']
    AbsolutePressure > 807.5
       date_max_temp > 1563385850 - 2019-07-17 12:50:50
       date_min_temp > 1563372817 - 2019-07-17 09:13:37
            max_temp > 23.3
            min_temp > 20.1
      pressure_trend > down
          temp_trend > down
            time_utc > 1563407011 - 2019-07-17 18:43:31
                 CO2 = 497
            Humidity = 63
               Noise = 36
            Pressure = 1019.1
         Temperature = 22.4
module outdoor - Outdoor
                 _id : 02:00:00:22:b8:7e
           data_type : ['Temperature', 'Humidity']
          last_setup : 1520632819 - 2018-03-09 16:00:19
            firmware : 44
           rf_status : 73 (90=low, 60=highest)
     battery_percent : 65 %
        last_message : 1563407021 - 2018-03-09 16:00:19
           last_seen : 1563407015 - 2018-03-09 16:00:19
       date_max_temp > 1563385207 - 2019-07-17 12:40:07
       date_min_temp > 1563366743 - 2019-07-17 07:32:23
            max_temp > 26.7
            min_temp > 17.3
          temp_trend > down
            time_utc > 1563406964 - 2019-07-17 18:42:44
            Humidity = 73
         Temperature = 20.5
module Rain Gauge - Rain Gauge
                 _id : 05:00:00:02:d3:6c
           data_type : ['Rain']
          last_setup : 1523057640 - 2018-04-06 18:34:00
            firmware : 8
           rf_status : 72 (90=low, 60=highest)
     battery_percent : 78 %
        last_message : 1563407021 - 2018-04-06 18:34:00
           last_seen : 1563407021 - 2018-04-06 18:34:00
          sum_rain_1 > 0.30300000000000005
         sum_rain_24 > 19.7
            time_utc > 1563407009 - 2019-07-17 18:43:29
                Rain = 0.303
{'body': {'1563405322': [22.7, 507, 62, 36, 1018.7], '1563405622': [22.6, 499, 62, 36, 1019], '1563405922': [22.6, 501, 62, 35, 1019.1], '1563406226': [22.5, 507, 63, 36, 1019.2], '1563406527': [22.5, 503, 62, 35, 1019.2], '1563406831': [22.4, 498, 62, 35, 1019.1], '1563407011': [22.4, 497, 63, 36, 1019.1]}, 'status': 'ok', 'time_exec': 0.030382871627807617, 'time_server': 1563407073}
{'body': {'1563405272': [21.2, 72], '1563405579': [21, 71], '1563405887': [20.8, 71], '1563406195': [20.8, 71], '1563406502': [20.6, 70], '1563406810': [20.5, 72], '1563406964': [20.5, 73]}, 'status': 'ok', 'time_exec': 0.018594026565551758, 'time_server': 1563407074}
{'body': {'1563405317': [0], '1563405611': [0], '1563405919': [0], '1563406227': [0], '1563406521': [0], '1563406829': [0], '1563407009': [0.303]}, 'status': 'ok', 'time_exec': 0.031126976013183594, 'time_server': 1563407074}
#+end_example

So the ~dump~ command works fine.  We just need to work out how to change the ~fetch~ command. 

This implementation is just copied from ~netatmo.fetch~, but changing the necessary parameters to fetch data from the rain gauge. 

#+begin_src python :tangle netatmo-fetch-rain.py
  import sys
  sys.path.append("/Users/will/Source/netatmo/src/netatmo")
  import netatmo

  def fetch_rain():
      """
          retrieve measures from rain station and append them to csv files
      """
      ws = netatmo.WeatherStation(netatmo.DEFAULT_RC_FILE)
      if not ws.get_data():
          return
      station = ws.station_by_name()
      rainmodule = station['modules'][1]
      print("module_id    : {}".format(rainmodule['_id']))
      print("module_name  : {}".format(rainmodule['module_name']))
      print("data_type    : {}".format(rainmodule['data_type']))

      data_type = ["Rain"]
      netatmo.dl_csv(ws, "netatmo_rain.csv",
                     station['_id'], rainmodule['_id'],
                     data_type, rainmodule['dashboard_data']['time_utc'])


  if __name__ == "__main__":
      fetch_rain()

#+end_src

#+RESULTS:
: None

#+begin_src sh :results verbatim :exports both
python netatmo-fetch-rain.py
#+end_src

#+RESULTS:
#+begin_example
module_id    : 05:00:00:02:d3:6c
module_name  : Rain Gauge
data_type    : ['Rain']
getmeasure 1 date_begin=1585591277 Mon Mar 30 12:01:17 2020
getmeasure 2 date_begin=1585900223 Fri Apr  3 01:50:23 2020
getmeasure 3 date_begin=1586209271 Mon Apr  6 16:41:11 2020
getmeasure 4 date_begin=1586518985 Fri Apr 10 06:43:05 2020
getmeasure 5 date_begin=1586828949 Mon Apr 13 20:49:09 2020
getmeasure 6 date_begin=1587137314 Fri Apr 17 10:28:34 2020
getmeasure 7 date_begin=1587443223 Mon Apr 20 23:27:03 2020
getmeasure 8 date_begin=1587750804 Fri Apr 24 12:53:24 2020
getmeasure 9 date_begin=1588058602 Tue Apr 28 02:23:22 2020
getmeasure 10 date_begin=1588367664 Fri May  1 16:14:24 2020
getmeasure 11 date_begin=1588675353 Tue May  5 05:42:33 2020
getmeasure 12 date_begin=1588980844 Fri May  8 18:34:04 2020
getmeasure 13 date_begin=1589287866 Tue May 12 07:51:06 2020
getmeasure 14 date_begin=1589596310 Fri May 15 21:31:50 2020
getmeasure 15 date_begin=1589904462 Tue May 19 11:07:42 2020
getmeasure 16 date_begin=1590212228 Sat May 23 00:37:08 2020
getmeasure 17 date_begin=1590521430 Tue May 26 14:30:30 2020
getmeasure 18 date_begin=1590828415 Sat May 30 03:46:55 2020
getmeasure 19 date_begin=1591136258 Tue Jun  2 17:17:38 2020
getmeasure 20 date_begin=1591444139 Sat Jun  6 06:48:59 2020
getmeasure 21 date_begin=1591751675 Tue Jun  9 20:14:35 2020
getmeasure 22 date_begin=1592059005 Sat Jun 13 09:36:45 2020
getmeasure 23 date_begin=1592367041 Tue Jun 16 23:10:41 2020
getmeasure 24 date_begin=1592682383 Sat Jun 20 14:46:23 2020
getmeasure 25 date_begin=1592990008 Wed Jun 24 04:13:28 2020
getmeasure 26 date_begin=1593298209 Sat Jun 27 17:50:09 2020
getmeasure 27 date_begin=1593604924 Wed Jul  1 07:02:04 2020
getmeasure 28 date_begin=1593912972 Sat Jul  4 20:36:12 2020
getmeasure 29 date_begin=1594220073 Wed Jul  8 09:54:33 2020
getmeasure 30 date_begin=1594527224 Sat Jul 11 23:13:44 2020
getmeasure 31 date_begin=1594834259 Wed Jul 15 12:30:59 2020
getmeasure 32 date_begin=1595142555 Sun Jul 19 02:09:15 2020
getmeasure 33 date_begin=1595449609 Wed Jul 22 15:26:49 2020
getmeasure 34 date_begin=1595755351 Sun Jul 26 04:22:31 2020
getmeasure 35 date_begin=1596061540 Wed Jul 29 17:25:40 2020
getmeasure 36 date_begin=1596369063 Sun Aug  2 06:51:03 2020
getmeasure 37 date_begin=1596676328 Wed Aug  5 20:12:08 2020
getmeasure 38 date_begin=1596983543 Sun Aug  9 09:32:23 2020
getmeasure 39 date_begin=1597292116 Wed Aug 12 23:15:16 2020
getmeasure 40 date_begin=1597599614 Sun Aug 16 12:40:14 2020
#+end_example



** Download data into CSV files
Run this periodically - it should just grab the new data (also run the rain gauge version above)

#+BEGIN_SRC sh :results verbatim :exports both
~/Source/netatmo/src/netatmo/netatmo.py fetch
#+END_SRC

#+RESULTS:
#+begin_example
station_name : Privada Hijos del Ejército
device_id    : 70:ee:50:22:ce:e6
module_name  : indoor
data_type    : ['Temperature', 'CO2', 'Humidity', 'Noise', 'Pressure']
module_id    : 02:00:00:22:b8:7e
module_name  : outdoor
data_type    : ['Temperature', 'Humidity']
getmeasure 1 date_begin=1585591281 Mon Mar 30 12:01:21 2020
getmeasure 2 date_begin=1585900233 Fri Apr  3 01:50:33 2020
getmeasure 3 date_begin=1586209274 Mon Apr  6 16:41:14 2020
getmeasure 4 date_begin=1586518986 Fri Apr 10 06:43:06 2020
getmeasure 5 date_begin=1586828956 Mon Apr 13 20:49:16 2020
getmeasure 6 date_begin=1587137016 Fri Apr 17 10:23:36 2020
getmeasure 7 date_begin=1587442330 Mon Apr 20 23:12:10 2020
getmeasure 8 date_begin=1587749906 Fri Apr 24 12:38:26 2020
getmeasure 9 date_begin=1588057698 Tue Apr 28 02:08:18 2020
getmeasure 10 date_begin=1588366759 Fri May  1 15:59:19 2020
getmeasure 11 date_begin=1588674456 Tue May  5 05:27:36 2020
getmeasure 12 date_begin=1588979995 Fri May  8 18:19:55 2020
getmeasure 13 date_begin=1589286667 Tue May 12 07:31:07 2020
getmeasure 14 date_begin=1589595106 Fri May 15 21:11:46 2020
getmeasure 15 date_begin=1589903263 Tue May 19 10:47:43 2020
getmeasure 16 date_begin=1590211033 Sat May 23 00:17:13 2020
getmeasure 17 date_begin=1590520226 Tue May 26 14:10:26 2020
getmeasure 18 date_begin=1590826920 Sat May 30 03:22:00 2020
getmeasure 19 date_begin=1591134762 Tue Jun  2 16:52:42 2020
getmeasure 20 date_begin=1591442640 Sat Jun  6 06:24:00 2020
getmeasure 21 date_begin=1591749868 Tue Jun  9 19:44:28 2020
getmeasure 22 date_begin=1592057205 Sat Jun 13 09:06:45 2020
getmeasure 23 date_begin=1592364936 Tue Jun 16 22:35:36 2020
getmeasure 24 date_begin=1592673018 Sat Jun 20 12:10:18 2020
getmeasure 25 date_begin=1592980671 Wed Jun 24 01:37:51 2020
getmeasure 26 date_begin=1593289154 Sat Jun 27 15:19:14 2020
getmeasure 27 date_begin=1593595643 Wed Jul  1 04:27:23 2020
getmeasure 28 date_begin=1593903313 Sat Jul  4 17:55:13 2020
getmeasure 29 date_begin=1594210430 Wed Jul  8 07:13:50 2020
getmeasure 30 date_begin=1594517666 Sat Jul 11 20:34:26 2020
getmeasure 31 date_begin=1594824312 Wed Jul 15 09:45:12 2020
getmeasure 32 date_begin=1595131398 Sat Jul 18 23:03:18 2020
getmeasure 33 date_begin=1595438142 Wed Jul 22 12:15:42 2020
getmeasure 34 date_begin=1595743887 Sun Jul 26 01:11:27 2020
getmeasure 35 date_begin=1596049770 Wed Jul 29 14:09:30 2020
getmeasure 36 date_begin=1596356706 Sun Aug  2 03:25:06 2020
getmeasure 37 date_begin=1596663668 Wed Aug  5 16:41:08 2020
getmeasure 38 date_begin=1596970862 Sun Aug  9 06:01:02 2020
getmeasure 39 date_begin=1597279455 Wed Aug 12 19:44:15 2020
getmeasure 40 date_begin=1597586942 Sun Aug 16 09:09:02 2020
getmeasure 41 date_begin=1597894511 Wed Aug 19 22:35:11 2020
getmeasure 1 date_begin=1585591277 Mon Mar 30 12:01:17 2020
getmeasure 2 date_begin=1585900531 Fri Apr  3 01:55:31 2020
getmeasure 3 date_begin=1586209835 Mon Apr  6 16:50:35 2020
getmeasure 4 date_begin=1586519588 Fri Apr 10 06:53:08 2020
getmeasure 5 date_begin=1586911082 Tue Apr 14 19:38:02 2020
getmeasure 6 date_begin=1588095093 Tue Apr 28 12:31:33 2020
getmeasure 7 date_begin=1588404436 Sat May  2 02:27:16 2020
getmeasure 8 date_begin=1588712721 Tue May  5 16:05:21 2020
getmeasure 9 date_begin=1589019141 Sat May  9 05:12:21 2020
getmeasure 10 date_begin=1589327061 Tue May 12 18:44:21 2020
getmeasure 11 date_begin=1589635852 Sat May 16 08:30:52 2020
getmeasure 12 date_begin=1589943670 Tue May 19 22:01:10 2020
getmeasure 13 date_begin=1590257069 Sat May 23 13:04:29 2020
getmeasure 14 date_begin=1590566649 Wed May 27 03:04:09 2020
getmeasure 15 date_begin=1590875780 Sat May 30 16:56:20 2020
getmeasure 16 date_begin=1591184424 Wed Jun  3 06:40:24 2020
getmeasure 17 date_begin=1591493742 Sat Jun  6 20:35:42 2020
getmeasure 18 date_begin=1591802713 Wed Jun 10 10:25:13 2020
getmeasure 19 date_begin=1592110274 Sat Jun 13 23:51:14 2020
getmeasure 20 date_begin=1592418637 Wed Jun 17 13:30:37 2020
getmeasure 21 date_begin=1592726428 Sun Jun 21 03:00:28 2020
getmeasure 22 date_begin=1593034637 Wed Jun 24 16:37:17 2020
getmeasure 23 date_begin=1593342916 Sun Jun 28 06:15:16 2020
getmeasure 24 date_begin=1593650425 Wed Jul  1 19:40:25 2020
getmeasure 25 date_begin=1593958551 Sun Jul  5 09:15:51 2020
getmeasure 26 date_begin=1594266849 Wed Jul  8 22:54:09 2020
getmeasure 27 date_begin=1594574770 Sun Jul 12 12:26:10 2020
getmeasure 28 date_begin=1594881643 Thu Jul 16 01:40:43 2020
getmeasure 29 date_begin=1595191921 Sun Jul 19 15:52:01 2020
getmeasure 30 date_begin=1595500167 Thu Jul 23 05:29:27 2020
getmeasure 31 date_begin=1595807882 Sun Jul 26 18:58:02 2020
getmeasure 32 date_begin=1596116398 Thu Jul 30 08:39:58 2020
getmeasure 33 date_begin=1596423985 Sun Aug  2 22:06:25 2020
getmeasure 34 date_begin=1596732967 Thu Aug  6 11:56:07 2020
getmeasure 35 date_begin=1597041162 Mon Aug 10 01:32:42 2020
getmeasure 36 date_begin=1597350671 Thu Aug 13 15:31:11 2020
getmeasure 37 date_begin=1597659656 Mon Aug 17 05:20:56 2020
#+end_example
** DONE Make graphs
CLOSED: [2018-03-11 Sun 00:02]
*** Inside and outside temperature and humidity
#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)

  plotfile = "weather-test.png"

  fig, (ax2, ax) = plt.subplots(2, 1, sharex=True, figsize=(15, 7))

  ax2.plot(df_inside.index.to_pydatetime(), df_inside.Humidity, label="inside", lw=0.2)
  ax2.plot(df_outside.index.to_pydatetime(), df_outside.Humidity, label="outside", lw=0.2)
  ax2.legend()
  ax2.set(
      ylabel="Humidity, Percent"
  )

  ax.plot(df_inside.index.to_pydatetime(), df_inside.Temperature, label="inside", lw=0.2)
  ax.plot(df_outside.index.to_pydatetime(), df_outside.Temperature, label="outside", lw=0.2)
  ax.legend()
  ax.set(
      xlabel="Date",
      ylabel="Temperature, Celsius"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:weather-test.png]]
*** Pressure, CO_2, and noise 


#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df = df_inside.join(df_outside, rsuffix=" out")
  # Correct the pressures from before 2019-07
  lowmask = df.Pressure < 1000.0
  df.Pressure[lowmask] += 212.0

  df_max_day = df.resample('1D').max()
  df_min_day = df.resample('1D').min()

  plotfile = "noise-test.png"

  fig, (ax3, ax2, ax) = plt.subplots(3, 1, sharex=True, figsize=(15, 10))


  ax3.fill_between(df.index.to_pydatetime(), df.Pressure,
                   step="mid", y2=800.0, label="Pressure")
  ax3.plot(df_max_day.index.to_pydatetime(), df_max_day.Pressure,
           label="_nolabel", color="r")
  ax3.plot(df_min_day.index.to_pydatetime(), df_min_day.Pressure,
           label="_nolabel", color="w")
  ax3.legend(loc="upper left")
  ax3.set(
      ylabel="Pressure, mB",
      ylim=[1010.0, 1030.0],
  )

  ax2.fill_between(df.index.to_pydatetime(), df.CO2,
                   step="mid", y2=330.0, label="CO2")
  ax2.plot(df_max_day.index.to_pydatetime(), df_max_day.CO2,
           label="_nolabel", color="r")
  ax2.plot(df_min_day.index.to_pydatetime(), df_min_day.CO2,
           label="_nolabel", color="w")
  ax2.legend(loc="upper left")
  ax2.set(
      ylabel="CO$_{2}$, ppm",
      ylim=[310.0, 1000.0],
  )

  ax.fill_between(df.index.to_pydatetime(), df.Noise, y2=33.0, label="Noise")
  ax.legend(loc="upper left")
  ax.set(
      xlabel="Date",
      ylabel="Noise, dB"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:noise-test.png]]
*** Rain
#+BEGIN_SRC python :return plotfile :results file :exports both
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)
  plotfile = "rain.png"

  dfo_max_day = df_outside.resample('1D').max()
  dfo_min_day = df_outside.resample('1D').min()
  dfr_sum_day = df_rain.resample('1D').sum()

  fig, (ax2, ax) = plt.subplots(2, 1, sharex=True, figsize=(15, 7))

  ax2.plot(dfo_min_day.index.to_pydatetime(), dfo_min_day.Humidity, label="Daily min")
  ax2.plot(dfo_max_day.index.to_pydatetime(), dfo_max_day.Humidity, label="Daily max")
  ax2.legend()
  ax2.set(
      ylabel="Humidity, Percent"
  )

  ax.fill_between(dfr_sum_day.index.to_pydatetime(), dfr_sum_day.Rain,
                  label="Daily accum", step="mid")
  ax.legend()
  ax.set(
      xlabel="Date",
      ylabel="Rain, mm"
  )

  fig.savefig(plotfile, dpi=600)
  fig.savefig(plotfile.replace(".png", ".pdf"))


#+END_SRC

#+RESULTS:
[[file:rain.png]]

*** Organize by week
#+begin_src python :return plotfile :results file :exports both
  import sys
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "co2-by-week.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(2, 1, sharex=True, figsize=(15, 7))
  co2_stack, noise_stack, Xs_stack = [], [], []
  for name, group in df.groupby([df.index.year, df.index.week]):
      start_day= group.index.min().to_pydatetime()
      #convert date to week age
      Xs = mdates.date2num(group.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      mean_by_hr = group.resample("1H").mean()
      mean_by_10m = group.resample("10T").mean()
      Xs_by_hr = mdates.date2num(mean_by_hr.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      Xs_by_10m = mdates.date2num(mean_by_10m.index.to_pydatetime()) \
          - mdates.date2num(start_day)

      axes[0].plot(Xs_by_10m, mean_by_10m.Noise, lw=0.1, alpha=0.2, color='k')
      axes[1].plot(Xs_by_10m,  mean_by_10m.CO2, lw=0.1, alpha=0.3, color='k')
      if len(Xs_by_10m) == 24*7*6:
          # Only use full-week time series for calculating the means
          co2_stack.append(mean_by_10m.CO2)
          noise_stack.append(mean_by_10m.Noise)
          Xs_stack.append(Xs_by_10m)

  co2_mean = np.nanmean(co2_stack, axis=0)
  noise_mean = np.nanmean(noise_stack, axis=0)
  Xs_mean = np.nanmean(Xs_stack, axis=0)
  axes[0].plot(Xs_mean, noise_mean, lw=2, color="r", alpha=0.4)
  axes[1].plot(Xs_mean, co2_mean, lw=2, color="r", alpha=0.4)
  axes[1].set_xticklabels(weekday_names)
  axes[1].set_xticks(range(0, len(weekday_names)))
  axes[0].set(
      ylim=[30.0, 70.0],
      ylabel="Noise, dB",
  )
  axes[1].set(
      xlim=[-0.1, 7.1], ylim=[300.0, 900.0],
      xlabel="Day of week", ylabel="CO2, ppm",
  )
  for ax in axes:
      ax.xaxis.set_minor_locator(AutoMinorLocator(8))
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:co2-by-week.png]]

+ CO2 comes from breathing and cooking
  + We can see spikes for breakfast, lunch, and tea
  + No spike at lunchtime on Saturday because we have salad
  + Big spike for breakfast pancakes on Sunday 

#+begin_src python :return plotfile :results file :exports both
  import sys
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "rain-by-week.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df_inside = df_inside.resample("10T").mean()
  df_outside = df_outside.resample("10T").mean()
  df_rain = df_rain.resample("10T").sum()

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(2, 1, sharex=True, figsize=(15, 7))
  humidity_stack = []
  for name, group in df.groupby([df.index.year, df.index.week]):
      if not np.any(group.Rain):
          continue # skip dry weeks
      start_day= group.index.min().to_pydatetime()
      #convert date to week age
      Xs = mdates.date2num(group.index.to_pydatetime()) \
          - mdates.date2num(start_day)
      group_by_hr = group.resample("1H").sum()
      mean_by_hr = group.resample("1H").mean()
      if len(mean_by_hr) == 24*7:
          Xs_by_hr = mdates.date2num(group_by_hr.index.to_pydatetime()) \
              - mdates.date2num(start_day)
          group_by_hr.Rain[group_by_hr.Rain==0.0] = np.nan
          axes[0].plot(Xs_by_hr, group_by_hr.Rain, 'o', mec="none", lw=1.0, alpha=0.5)
          axes[1].plot(Xs, group["Humidity out"], lw=0.2, alpha=0.7, color='k')
          humidity_stack.append(mean_by_hr["Humidity out"].values)
  #sys.exit(repr(type(humidity_stack[0])))
  humidity = np.nanmean(humidity_stack, axis=0)
  axes[1].plot(Xs_by_hr, humidity, lw=2, color="r", alpha=0.4)
  axes[1].set_xticklabels(weekday_names)
  axes[1].set_xticks(range(0, len(weekday_names)))
  axes[0].set(
      ylim=[-0.1, 30.1],
      ylabel="Rain, mm / hour",
  )
  axes[1].set(
      xlim=[-0.1, 7.1], ylim=[0.0, 100.0],
      xlabel="Day of week", ylabel="Humidity, %",
  )
  for ax in axes:
      ax.xaxis.set_minor_locator(AutoMinorLocator(8))
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:rain-by-week.png]]



*** Inter-year comparisons

#+begin_src python :return plotfile :results file :exports both
  import sys
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "inter-year-weekly.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df_inside = df_inside.resample("1W").mean()
  df_outside = df_outside.resample("1W").mean()
  df_rain = df_rain.resample("1W").sum()

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(2, 1, sharex=True, figsize=(15, 7))
  humidity_stack = []
  for yearname, group in df.groupby(df.index.year):
      axes[0].plot(group.index.week, group.Rain,
                   'o', mec="none", lw=1.0, alpha=0.8,
                   label=yearname,
      )
      axes[1].plot(group.index.week, group["Humidity out"], alpha=0.9, label=yearname)
  axes[0].legend()
  axes[1].legend()
  axes[0].set(
      ylim=[-1.0, None],
      ylabel="Rain, mm / week",
  )
  axes[1].set(
      xlim=[-0.1, 52.1], ylim=[0.0, 100.0],
      xlabel="Week", ylabel="Humidity, %",
  )
  for ax in axes:
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:inter-year-weekly.png]]


#+begin_src python :return plotfile :results file :exports both
  import sys
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns
  import matplotlib.dates as mdates
  from matplotlib.ticker import (MultipleLocator, FormatStrFormatter,
                                 AutoMinorLocator)
  sns.set_color_codes('dark')
  plotfile = "inter-year-accum.png"
  weekday_names = "Mon Tue Wed Thu Fri Sat Sun Mon".split(' ')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  df_inside = df_inside.resample("1D").min()
  df_outside = df_outside.resample("1D").min()
  df_rain = df_rain.resample("1D").sum()

  df = df_inside.join(df_outside, rsuffix=" out").join(df_rain, rsuffix=" rain")

  fig, axes = plt.subplots(3, 1, sharex=True, figsize=(15, 7))
  humidity_stack = []
  for yearname, group in df.groupby(df.index.year):
      axes[0].plot(group.index.dayofyear, group.Rain.cumsum(),
                   alpha=0.7,
                   label=yearname,
      )
      axes[1].plot(group.index.dayofyear, group["Humidity out"], alpha=0.7, label=yearname)
      axes[2].plot(group.index.dayofyear, group["Temperature out"], alpha=0.7, label=yearname)
  axes[0].set(
      ylim=[-1.0, None],
      ylabel="Cumulative rain, mm",
  )
  axes[1].set(
      ylim=[-1.0, 101.0],
      ylabel="Min Humidity, %",
  )
  axes[2].set(
      xlim=[-0.1, 365.1], ylim=[5.0, 25.0],
      xlabel="Day", ylabel="Min Temperature, C",
  )
  for ax in axes:
      ax.legend()
      ax.grid(color='r', axis='x', alpha=0.5)
      ax.grid(color='r', axis='x', alpha=0.2, which="minor")
  fig.tight_layout()
  fig.savefig(plotfile, dpi=600)

#+end_src

#+RESULTS:
[[file:inter-year-accum.png]]

So, 2019 has half the rain of 2018
*** Two-factor pair graphs

Correlations between selected measurements.  This takes about about 2 mins to run now, so I save it to a file and run it in a terminal.

#+BEGIN_SRC python :return figfile :results file :exports both :tangle weather-2factor.py
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  sns.set_color_codes('dark')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  # Correct the pressures from before 2019-07
  lowmask = df_inside.Pressure < 1000.0
  df_inside.Pressure[lowmask] += 212.0


  figfile = "weather-pairplot.png"

  # Resample by day and by hour
  dfi_max_day = df_inside.resample('1D').max()
  dfi_min_day = df_inside.resample('1D').min()
  dfi_med_hr = df_inside.resample('1H').mean()

  dfo_med_hr = df_outside.resample('1H').mean()
  dfr_sum_hr = df_rain.resample("1H").sum()

  # Restrict to afternoons, 12am to 5pm
  # pm_indices = dfi_med_hr.index.indexer_between_time('12:00', '17:00')

  # Restrict to daytime: 
  day_indices = dfi_med_hr.index.indexer_between_time('07:00', '19:00')

  df = dfi_med_hr.join(dfo_med_hr, rsuffix=" out").join(dfr_sum_hr, rsuffix=" rain")
  df = df.iloc[day_indices]
  df = df.fillna(method='bfill')


  # df = dfi_min_day
  variables = ['Temperature', 'Temperature out', 'CO2', 'Humidity', 'Humidity out', 'Noise', 'Pressure', 'Rain']
  minmax = {
      'Temperature': [0, 35],
      'Temperature out': [0, 35],
      'CO2': [300, 1000],
      'Humidity': [0, 100],
      'Humidity out': [0, 100],
      'Noise': [30, 70],
      'Pressure': [1010, 1030],
      'Rain': [0.1, 25],
  }
  variables = list(minmax)
  g = sns.PairGrid(df, vars=variables, height=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.03, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=15)
  g = g.map_diag(plt.hist)
  # Make sure graph limits are always consistent
  for j, k in enumerate(variables):
      g.axes[j, j].set(xlim=minmax[k], ylim=minmax[k])
  g.fig.suptitle("Hourly means, daytime only (7AM-7PM)")
  g.savefig(figfile)


  # Repeat for night time
  night_indices = dfi_med_hr.index.indexer_between_time('19:00', '07:00')
  df = dfi_med_hr.join(dfo_med_hr, rsuffix=" out").join(dfr_sum_hr, rsuffix=" rain")
  df = df.iloc[night_indices]
  df = df.fillna(method='bfill')
  g = sns.PairGrid(df, vars=variables, size=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.03, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=15)
  g = g.map_diag(plt.hist)
  # Make sure graph limits are same for night and day
  for j, k in enumerate(variables):
      g.axes[j, j].set(xlim=minmax[k], ylim=minmax[k])
  g.fig.suptitle("Hourly means, nighttime only (7PM-7AM)")
  g.savefig(figfile.replace(".png", "-night.png"))

#+END_SRC

#+RESULTS:
[[file:weather-pairplot.png]]

Also, the night-time version:
[[file:weather-pairplot-night.png]]


#+BEGIN_SRC python :return figfile :results file :exports both :tangle weather-2factor-maxmin.py
  import numpy as np
  import pandas as pd
  from matplotlib import pyplot as plt
  import seaborn as sns

  sns.set_color_codes('dark')

  df_inside = pd.read_csv("netatmo_station.csv", sep=';', index_col=1, parse_dates=True)
  df_outside = pd.read_csv("netatmo_module.csv", sep=';', index_col=1, parse_dates=True)
  df_rain =  pd.read_csv("netatmo_rain.csv", sep=';', index_col=1, parse_dates=True)

  # Correct the pressures from before 2019-07
  lowmask = df_inside.Pressure < 1000.0
  df_inside.Pressure[lowmask] += 212.0


  figfile = "weather-pairplot-daily-max.png"

  # Resample by day and by hour
  dfi_max_day = df_inside.resample('1D').max()
  dfi_min_day = df_inside.resample('1D').min()
  dfi_med_hr = df_inside.resample('1H').mean()

  dfo_med_hr = df_outside.resample('1H').mean()
  dfo_max_day = df_outside.resample('1D').max()
  dfo_min_day = df_outside.resample('1D').min()

  dfr_sum_hr = df_rain.resample("1H").sum()
  dfr_max_day = df_rain.resample("1D").max()
  dfr_min_day = df_rain.resample("1D").min()

  # Restrict to afternoons, 12am to 5pm
  # pm_indices = dfi_med_hr.index.indexer_between_time('12:00', '17:00')


  df = dfi_max_day.join(dfo_max_day, rsuffix=" out").join(dfr_max_day, rsuffix=" rain")
  df = df.fillna(method='bfill')


  # df = dfi_min_day
  variables = ['Temperature', 'Temperature out', 'CO2', 'Humidity', 'Humidity out', 'Noise', 'Pressure', 'Rain']
  minmax = {
      'Temperature': [0, 35],
      'Temperature out': [0, 35],
      'CO2': [300, 1000],
      'Humidity': [0, 100],
      'Humidity out': [0, 100],
      'Noise': [30, 70],
      'Pressure': [1010, 1030],
      'Rain': [0.01, 5.0],
  }
  variables = list(minmax)
  g = sns.PairGrid(df, vars=variables, height=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.1, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=15)
  g = g.map_diag(plt.hist)
  # Make sure graph limits are always consistent
  for j, k in enumerate(variables):
      g.axes[j, j].set(xlim=minmax[k], ylim=minmax[k])
  g.fig.suptitle("Daily maxima")
  g.savefig(figfile)


  # Repeat for minmima
  df = dfi_min_day.join(dfo_min_day, rsuffix=" out").join(dfr_min_day, rsuffix=" rain")
  df = df.fillna(method='bfill')
  g = sns.PairGrid(df, vars=variables, size=1.5)
  g = g.map_upper(plt.scatter, marker='.', alpha=0.1, facecolor='r', edgecolor='none')
  g = g.map_lower(sns.kdeplot, cmap="Purples_d", n_levels=15)
  g = g.map_diag(plt.hist)
  # Make sure graph limits are same for night and day
  for j, k in enumerate(variables):
      g.axes[j, j].set(xlim=minmax[k], ylim=minmax[k])
  g.fig.suptitle("Daily minima")
  g.savefig(figfile.replace("-max.png", "-min.png"))

#+END_SRC

#+RESULTS:
[[file:weather-pairplot-daily-max.png]]

[[file:weather-pairplot-daily-min.png]]
* Absolute humidity and COVID-19
+ This is calculated in a [[file:notebooks/COVID-19 versus the weather.ipynb][python notebook]].
  + With accompanying [[file:notebooks/COVID-19 versus the weather.py][pure python file]]
+ Summary graph
  [[file:notebooks/morelia-absolute-humidity-2018-to-2020.png]]
